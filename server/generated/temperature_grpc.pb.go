// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/temperature.proto

package temperature

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TemperatureService_PushTemperature_FullMethodName   = "/temperature.TemperatureService/PushTemperature"
	TemperatureService_StreamTemperature_FullMethodName = "/temperature.TemperatureService/StreamTemperature"
)

// TemperatureServiceClient is the client API for TemperatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemperatureServiceClient interface {
	PushTemperature(ctx context.Context, in *TemperatureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StreamTemperature(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TemperatureResponse], error)
}

type temperatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemperatureServiceClient(cc grpc.ClientConnInterface) TemperatureServiceClient {
	return &temperatureServiceClient{cc}
}

func (c *temperatureServiceClient) PushTemperature(ctx context.Context, in *TemperatureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TemperatureService_PushTemperature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureServiceClient) StreamTemperature(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TemperatureResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TemperatureService_ServiceDesc.Streams[0], TemperatureService_StreamTemperature_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, TemperatureResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TemperatureService_StreamTemperatureClient = grpc.ServerStreamingClient[TemperatureResponse]

// TemperatureServiceServer is the server API for TemperatureService service.
// All implementations must embed UnimplementedTemperatureServiceServer
// for forward compatibility.
type TemperatureServiceServer interface {
	PushTemperature(context.Context, *TemperatureRequest) (*emptypb.Empty, error)
	StreamTemperature(*StreamRequest, grpc.ServerStreamingServer[TemperatureResponse]) error
	mustEmbedUnimplementedTemperatureServiceServer()
}

// UnimplementedTemperatureServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTemperatureServiceServer struct{}

func (UnimplementedTemperatureServiceServer) PushTemperature(context.Context, *TemperatureRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTemperature not implemented")
}
func (UnimplementedTemperatureServiceServer) StreamTemperature(*StreamRequest, grpc.ServerStreamingServer[TemperatureResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTemperature not implemented")
}
func (UnimplementedTemperatureServiceServer) mustEmbedUnimplementedTemperatureServiceServer() {}
func (UnimplementedTemperatureServiceServer) testEmbeddedByValue()                            {}

// UnsafeTemperatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemperatureServiceServer will
// result in compilation errors.
type UnsafeTemperatureServiceServer interface {
	mustEmbedUnimplementedTemperatureServiceServer()
}

func RegisterTemperatureServiceServer(s grpc.ServiceRegistrar, srv TemperatureServiceServer) {
	// If the following call pancis, it indicates UnimplementedTemperatureServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TemperatureService_ServiceDesc, srv)
}

func _TemperatureService_PushTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).PushTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemperatureService_PushTemperature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).PushTemperature(ctx, req.(*TemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureService_StreamTemperature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemperatureServiceServer).StreamTemperature(m, &grpc.GenericServerStream[StreamRequest, TemperatureResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TemperatureService_StreamTemperatureServer = grpc.ServerStreamingServer[TemperatureResponse]

// TemperatureService_ServiceDesc is the grpc.ServiceDesc for TemperatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemperatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "temperature.TemperatureService",
	HandlerType: (*TemperatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushTemperature",
			Handler:    _TemperatureService_PushTemperature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTemperature",
			Handler:       _TemperatureService_StreamTemperature_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/temperature.proto",
}
